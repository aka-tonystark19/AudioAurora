#include <stdio.h>
#include <system.h>
#include <sys/alt_irq.h>
#include <sys/alt_stdio.h>
#include <altera_avalon_timer_regs.h>
#include "math.h"
#include "complex.h"
#include "stdlib.h"

typedef double complex cplx;

// Functions defined below
void init_isr(void);
static void hori_time_isr(void * context, alt_u32 id);
static void vert_time_isr(void * context, alt_u32 id);
void runfft(void);

//FFT code sampled from https://rosettacode.org/wiki/Fast_Fourier_transform
void fft(cplx buf[], int n);
void fft_helper(cplx buf[], cplx out[], int n, int step);
void printcplxArr(cplx arr[], int size);
int real[64];
int imag[64];

// Array to store the color values of the pixels
unsigned char image[160][120];

static int sizes[] = {50, 40, 30, 20, 10,
					  10, 20, 30, 40, 50,
					  50, 40, 30, 20, 10,
					  10, 20, 30, 40, 50};
static int colors[] =
	{0b000001, 0b000001, 0b000001, 0b000001, 0b000001,
	 0b000001, 0b000001, 0b000001, 0b000001, 0b000001,
	 0b000001, 0b000001, 0b000001, 0b000001, 0b000001,
	 0b000001, 0b000001, 0b000001, 0b000001, 0b000001};

// Pointer to VGA controller
volatile unsigned *vga = (volatile unsigned *) VGA_INTEGRATE_0_BASE;

int main()
{
  alt_putstr("Hello from Nios II!\n");

	// Initialize the image array and VGA screen to contain all black pixels
  for( int x = 0; x < 160; x++ ) {
	  for( int y = 0; y < 120; y++ ) {
		  image[x][y] = 0;
		  *vga = (y << 24) | (x << 16) | 0;
	  }
  }

  alt_putstr("Image Array Setup Complete\n");

  alt_putstr("Running FFT\n");
  cplx testArr [] = {0, 32363, 10125, -29195, -19259, 23169, 26509, -14875, -31163, 5125, 32767, 5125, -31163, -14875, 26509, 23169, -19259, -29195, 10125, 32363, 0, -32363, -10125, 29195, 19259, -23169, -26509, 14875, 31163, -5125, -32767, -5125, 31163, 14875, -26509, -23169, 19259, 29195, -10125, -32363, 0, 32363, 10125, -29195, -19259, 23169, 26509, -14875, -31163, 5125, 32767, 5125, -31163, -14875, 26509, 23169, -19259, -29195, 10125, 32363, 0, 32363, 10125, -29195};
  int size = sizeof testArr / sizeof testArr[0];

  fft(testArr, size);
  alt_putstr("After fft: ");
  printcplxArr(testArr, size);

  alt_putstr("Done FFT\n");

	// Initialize the hardware timer
//  init_isr();

  /* Event loop never exits. */
  while (1);

  return 0;
}


// Setup the hardware timer
void init_isr(void){
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, (void *)vert_time_isr, NULL, 0x0);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}

static void hori_time_isr(void * context, alt_u32 id) {
	static int sizes[] = {50, 40, 30, 20, 10,
							  10, 20, 30, 40, 50,
							  50, 40, 30, 20, 10,
							  10, 20, 30, 40, 50};
	static int colors[] = {0b000001, 0b000001, 0b000001, 0b000001, 0b000001,
							0b000001, 0b000001, 0b000001, 0b000001, 0b000001,
							0b000001, 0b000001, 0b000001, 0b000001, 0b000001,
							0b000001, 0b000001, 0b000001, 0b000001, 0b000001};

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);

	// Display and update image
	for( int i = 0; i < 160; i++) {
		for( int j = 0; j < 120; j++  ) {
			if (j % 6 != 0) {
				*vga = (j << 24) | (i << 16) | image[i][j];
				image[i][j] = (i > sizes[j/6] && i < 160-sizes[j/6]) ? colors[j/6] : 0;
			}
		}
	}

	// Change Size and Color
		for (int i = 0; i < 20; i++) {
			// size change
			if (sizes[i] < 10 || sizes[i] > 50) {
				sizes[i] = 30;
			} else {
				if (rand() % 2 == 0) {
					sizes[i] += (rand() % 5);
				} else {
					sizes[i] -= (rand() % 5);
				}
			}

			// color change
			if (rand() % 5 == 0) {
				if (colors[i] == 0b000011) {
						colors[i] = 0b000001;
				} else {
						colors[i]++;
				}
			}
		}
}

// Update the image array and display it on the VGA screen
static void vert_time_isr(void * context, alt_u32 id){
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);

	// Display and update image
	for( int j = 0; j < 120; j++ ) {
		for( int i = 0; i < 160; i++ ) {
			if (i % 8 != 0 && i % 8 != 1 ) {
				*vga = (j << 24) | (i << 16) | image[i][j];
				image[i][j] = (j > sizes[i/8] && j < 120-sizes[i/8]) ? colors[i/8] : 0;
			}
		}
	}

	// Change Size and Color
	for (int i = 0; i < 20; i++) {
		// size change
		if (sizes[i] < 10 || sizes[i] > 50) {
			sizes[i] = 30;
		} else {
			if (rand() % 2 == 0) {
				sizes[i] += (rand() % 5);
			} else {
				sizes[i] -= (rand() % 5);
			}
		}

		// color change
		if (rand() % 5 == 0) {
			if (colors[i] == 0b000111) {
					colors[i] = 0b000001;
			} else {
					colors[i]++;
			}
		}
	}



}

void fft(cplx buf[], int n)
{
	cplx out[n];
	for (int i = 0; i < n; i++){
		out[i] = buf[i];
	}

	fft_helper(buf, out, n, 1);
}

void fft_helper(cplx buf[], cplx out[], int n, int step)
{
	if (step < n) {
		fft_helper(out, buf, n, step * 2);
		fft_helper(out + step, buf + step, n, step * 2);

		for (int i = 0; i < n; i += 2 * step) {
			cplx t = cexp(-I * M_PI * i / n) * out[i + step];
			buf[i / 2]     = out[i] + t;
			buf[(i + n)/2] = out[i] - t;
		}
	}
}

void printcplxArr(cplx arr[], int size){
	for (int i = 0; i < size; i++){
		if (!cimag(arr[i])) {
			printf("%d, ", (int) creal(arr[i]));
			real[i] = (int) creal(arr[i]);
			imag[i] = 0;
		} else {
			printf("(%d, + %d i), ", (int) creal(arr[i]), (int) cimag(arr[i]));
			real[i] = (int) creal(arr[i]);
			imag[i] = (int) cimag(arr[i]);
		}
	}
	printf("\n");
}




